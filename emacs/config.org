#+TITLE: My Emacs Configuration
#+AUTHOR: Ayo Onipe
#+DATE: <2025-3-30>
#+EMAIL: ayosemail@gmail.com

* Inspiration
[[https://ryan.himmelwright.net/post/org-babel-setup/][Ryan Himmelwright's Org-Babel Emacs Config]]

* Package Management

** Package Repositories
#+BEGIN_SRC emacs-lisp

  (require 'package)
  (setq package-archives
        '(("gnu" . "https://elpa.gnu.org/packages/")
          ("nongnu" . "https://elpa.nongnu.org/nongnu/")
          ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)

#+END_SRC

** Setup Straight
#+BEGIN_SRC emacs-lisp
  
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

#+END_SRC

** Packages
*** Autocorrect

#+BEGIN_SRC emacs-lisp

  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode)
    :bind (:map flycheck-mode-map
                ("M-n" . flycheck-next-error)
                ("M-p" . flycheck-previous-error)))

#+END_SRC

*** Snippets

#+BEGIN_SRC emacs-lisp

   (use-package yasnippet
     :ensure t
     :config
     (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
     (yas-global-mode 1))

#+END_SRC

*** Completion

#+BEGIN_SRC emacs-lisp

  (use-package company
     :ensure t
     :init
     (global-company-mode))

#+END_SRC

*** Formatting

#+BEGIN_SRC emacs-lisp

  (use-package blacken
    :ensure t
    :hook (python-mode . blacken-mode))

  (use-package apheleia
    :ensure t
    :diminish ""
    :defines
    apheleia-formatters
    apheleia-mode-alist
    :functions
    apheleia-global-mode
    :config
    (setf (alist-get 'black apheleia-formatters)
        '("/opt/homebrew/bin/black" "-"))
    (setf (alist-get 'prettier-json apheleia-formatters)
          '("prettier" "--stdin-filepath" filepath))
    (setf (alist-get 'prettier apheleia-formatters)
          '("prettier" "--stdin-filepath" filepath))
    (setf (alist-get 'prettier apheleia-formatters)
          '("prettier" "--stdin-filepath" filepath))
    (add-to-list 'apheleia-mode-alist '(typescript-mode . prettier))
    (add-to-list 'apheleia-mode-alist '(web-mode . prettier))
    (apheleia-global-mode +1))

#+END_SRC

*** Ligatures

#+BEGIN_SRC emacs-lisp

    (use-package ligature
      :ensure t)

    (add-hook 'prog-mode-hook 'display-line-numbers-mode)

    ;; Enable the www ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))

    ;; Enable ligatures in programming modes                                                           
    (ligature-set-ligatures 'prog-mode '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
                                         ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
                                         "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
                                         "#_(" ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*" "/**"
                                         "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
                                         "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
                                         "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
                                         "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
                                         "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
                                         "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%"))

    (global-ligature-mode 't)

#+END_SRC

* Start-up Options
** Splash Screen
#+BEGIN_SRC emacs-lisp

  (setq inhibit-splash-screen t
        initial-scratch-message nil
        initial-major-mode 'org-mode)

#+END_SRC

* Core
** Autosaves

#+BEGIN_SRC emacs-lisp

  (setq auto-save-file-name-transforms
	`((".*" "~/.emacs.d/auto-saves/" t)))
  (setq auto-save-list-file-prefix "~/.emacs.d/auto-saves/.saves-")

  ;; Autosave after 20 keystrokes and every 30 seconds of idle time
  (setq auto-save-timeout 30)
  (setq auto-save-interval 20)

#+END_SRC

** Backups

#+BEGIN_SRC emacs-lisp

  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")))
  (setq backup-by-copying t    ;; Don't clobber symlinks
	delete-old-versions t  ;; Automatically delete excess backups
	kept-new-versions 6    ;; Keep some recent backups
	kept-old-versions 2    ;; Keep some old backups
	version-control t)     ;; Use versioned backups

#+END_SRC
** Utilities

*** Commenting

#+BEGIN_SRC emacs-lisp
 (defun comment-sexp ()
  "Comment out the sexp at point."
  (interactive)
  (save-excursion
    (mark-sexp)
    (paredit-comment-dwim)))
#+END_SRC

*** Read Variables from .env

#+BEGIN_SRC emacs-lisp

  (defun read-env-variable (variable-name)
    "Read the value of VARIABLE-NAME from the .env file."
    (with-temp-buffer
      (insert-file-contents "/Users/ayo/.emacs.d/.env")
      (goto-char (point-min))
      (when (re-search-forward (concat "^" (regexp-quote variable-name) "=\\(.+\\)") nil t)
	(match-string 1))))

#+END_SRC

* Window Management
** Buffers
#+BEGIN_SRC emacs-lisp

  (global-set-key [remap list-buffers] 'ibuffer)
  (global-set-key (kbd "M-i") 'imenu)

#+END_SRC

** Windows
Quickly switch to other window.

#+BEGIN_SRC emacs-lisp

  (global-set-key (kbd "M-o") 'other-window)
  (windmove-default-keybindings)

#+END_SRC

** Frames

** Interactive Search/Do
*** Vertico, Orderless, Consult, Embark & Prescient

#+BEGIN_SRC emacs-lisp

  (use-package vertico
    :ensure t
    ;; :custom
    ;; (vertico-scroll-margin 0) ;; Different scroll margin
    ;; (vertico-count 20) ;; Show more candidates
    ;; (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
    ;; (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
    :init
    (vertico-mode))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :ensure t
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :ensure t
    :custom
    ;; Support opening new minibuffers from inside existing minibuffers.
    (enable-recursive-minibuffers t)
    ;; Hide commands in M-x which do not work in the current mode.  Vertico
    ;; commands are hidden in normal buffers. This setting is useful beyond
    ;; Vertico.
    (read-extended-command-predicate #'command-completion-default-include-p)
    ;; Emacs 30 and newer: Disable Ispell completion function.
    ;; Try `cape-dict' as an alternative.
    (text-mode-ispell-word-completion nil)
    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (tab-always-indent 'complete)
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
		    (replace-regexp-in-string
		     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		     crm-separator)
		    (car args))
	    (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode))

  (use-package orderless
    :ensure t
    :custom
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
    ;; (orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))

  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    :ensure t
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
		("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))

  (use-package mct
    :ensure t)

  ;; Example configuration for Consult
  (use-package consult
    :ensure t
    ;; Replace bindings. Lazily loaded by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
	   ("C-c M-x" . consult-mode-command)
	   ("C-c h" . consult-history)
	   ("C-c k" . consult-kmacro)
	   ("C-c m" . consult-man)
	   ("C-c i" . consult-info)
	   ([remap Info-search] . consult-info)
	   ;; C-x bindings in `ctl-x-map'
	   ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
	   ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	   ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	   ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	   ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
	   ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
	   ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
	   ;; Custom M-# bindings for fast register access
	   ("M-#" . consult-register-load)
	   ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	   ("C-M-#" . consult-register)
	   ;; Other custom bindings
	   ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	   ;; M-g bindings in `goto-map'
	   ("M-g e" . consult-compile-error)
	   ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
	   ("M-g g" . consult-goto-line)             ;; orig. goto-line
	   ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
	   ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
	   ("M-g m" . consult-mark)
	   ("M-g k" . consult-global-mark)
	   ("M-g i" . consult-imenu)
	   ("M-g I" . consult-imenu-multi)
	   ;; M-s bindings in `search-map'
	   ("M-s d" . consult-find)                  ;; Alternative: consult-fd
	   ("M-s c" . consult-locate)
	   ("M-s g" . consult-grep)
	   ("M-s G" . consult-git-grep)
	   ("M-s r" . consult-ripgrep)
	   ("M-s l" . consult-line)
	   ("M-s L" . consult-line-multi)
	   ("M-s k" . consult-keep-lines)
	   ("M-s u" . consult-focus-lines)
	   ;; Isearch integration
	   ("M-s e" . consult-isearch-history)
	   :map isearch-mode-map
	   ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
	   ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
	   ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
	   ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
	   ;; Minibuffer history
	   :map minibuffer-local-map
	   ("M-s" . consult-history)                 ;; orig. next-matching-history-element
	   ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Tweak the register preview for `consult-register-load',
    ;; `consult-register-store' and the built-in commands.  This improves the
    ;; register formatting, adds thin separator lines, register sorting and hides
    ;; the window mode line.
    (advice-add #'register-preview :override #'consult-register-window)
    (setq register-preview-delay 0.5)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
	  xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep consult-man
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    (setq consult-narrow-key "<"))

  (use-package embark
    :ensure t
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . nil))))) ;; none

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

#+END_SRC

* Filesystem Management
#+BEGIN_SRC emacs-lisp

  (setq insert-directory-program "gls" dired-use-ls-dired t)
  (setq dired-listing-switches "-al --group-directories-first")
  (setf dired-kill-when-opening-new-dired-buffer t)
  (use-package dirvish
    :ensure t
    :custom
    (dirvish-quick-access-entries ; It's a custom option, `setq' won't work
     '(("h" "~/"                          "Home")
       ("d" "~/Downloads/"                "Downloads")
       ("m" "/mnt/"                       "Drives")
       ("t" "~/.local/share/Trash/files/" "TrashCan")))
    :config
    ;; (dirvish-peek-mode) ; Preview files in minibuffer
    ;; (dirvish-side-follow-mode) ; similar to `treemacs-follow-mode'
    (dirvish-override-dired-mode)
    (setq dirvish-mode-line-format
	  '(:left (sort symlink) :right (omit yank index)))
    (setq dirvish-attributes
	  '(all-the-icons file-time file-size collapse subtree-state vc-state git-msg))
    (setq delete-by-moving-to-trash t)
    (setq dired-listing-switches
	  "-l --almost-all --human-readable --group-directories-first --no-group")
    :bind	     ; Bind `dirvish|dirvish-side|dirvish-dwim' as you see fit
    (("C-c f" . dirvish-fd)
     :map dirvish-mode-map	   ; Dirvish inherits `dired-mode-map'
     ("a"   . dirvish-quick-access)
     ("f"   . dirvish-file-info-menu)
     ("y"   . dirvish-yank-menu)
     ("N"   . dirvish-narrow)
     ("^"   . dirvish-history-last)
     ("h"   . dirvish-history-jump)	; remapped `describe-mode'
     ("s"   . dirvish-quicksort)	; remapped `dired-sort-toggle-or-edit'
     ("v"   . dirvish-vc-menu)	; remapped `dired-view-file'
     ("TAB" . dirvish-subtree-toggle)
     ("M-f" . dirvish-history-go-forward)
     ("M-b" . dirvish-history-go-backward)
     ("M-l" . dirvish-ls-switches-menu)
     ("M-m" . dirvish-mark-menu)
     ("M-t" . dirvish-layout-toggle)
     ("M-s" . dirvish-setup-menu)
     ("M-e" . dirvish-emerge-menu)
     ("M-j" . dirvish-fd-jump)))

  (use-package dired-x
    :config
    ;; Make dired-omit-mode hide all "dotfiles"
    (setq dired-omit-files
	  (concat dired-omit-files "\\|^\\..*$")))

#+END_SRC

* Theme
[[https://github.com/doomemacs/themes?tab=readme-ov-file][DoomEmacs Theme List]]

[[https://github.com/guidoschmidt/circadian.el?tab=readme-ov-file][Circadian]] switches theme based on daylight.

#+BEGIN_SRC emacs-lisp

  (use-package doom-themes)

  (use-package circadian
    :ensure t
    :config
    (setq calendar-latitude 44.162758)
    (setq calendar-longitude -77.383232)
    (setq circadian-themes '((:sunrise . doom-moonlight)
                             (:sunset  . doom-monokai-pro)))
    (circadian-setup))

#+END_SRC

* Programming
** Language Server Protocol

#+BEGIN_SRC emacs-lisp

  (add-hook 'prog-mode-hook #'lsp)

  (use-package lsp-mode
    :diminish "LSP"
    :ensure t
    :hook ((lsp-mode . lsp-diagnostics-mode)
           (lsp-mode . lsp-enable-which-key-integration)
           ((tsx-ts-mode
             typescript-ts-mode
             js-ts-mode) . lsp-deferred))
    :custom
    (lsp-keymap-prefix "C-c l")           ; Prefix for LSP actions
    (lsp-diagnostics-provider :flycheck)
    (lsp-session-file (locate-user-emacs-file ".lsp-session"))
    (lsp-log-io nil)                      ; IMPORTANT! Use only for debugging! Drastically affects performance
    (lsp-keep-workspace-alive nil)        ; Close LSP server if all project buffers are closed
    (lsp-idle-delay 0.5)                  ; Debounce timer for `after-change-function'
    ;; core
    (lsp-enable-xref t)                   ; Use xref to find references
    (lsp-auto-configure t)                ; Used to decide between current active servers
    (lsp-eldoc-enable-hover t)            ; Display signature information in the echo area
    ;;(lsp-enable-dap-auto-configure t)     ; Debug support
    (lsp-enable-file-watchers nil)
    (lsp-enable-folding nil)              ; I disable folding since I use hideshow
    (lsp-enable-imenu t)
    (lsp-enable-indentation nil)          ; I use prettier
    (lsp-enable-links nil)                ; No need since we have `browse-url'
    (lsp-enable-on-type-formatting nil)   ; Prettier handles this
    (lsp-enable-suggest-server-download t) ; Useful prompt to download LSP providers
    (lsp-enable-symbol-highlighting t)     ; Shows usages of symbol at point in the current buffer
    (lsp-enable-text-document-color nil)   ; This is Treesitter's job

    (lsp-ui-sideline-show-hover nil)      ; Sideline used only for diagnostics
    (lsp-ui-sideline-diagnostic-max-lines 20) ; 20 lines since typescript errors can be quite big
    ;; completion
    (lsp-completion-enable t)
    (lsp-completion-enable-additional-text-edit t) ; Ex: auto-insert an import for a completion candidate
    (lsp-enable-snippet t)                         ; Important to provide full JSX completion
    (lsp-completion-show-kind t)                   ; Optional
    ;; headerline
    (lsp-headerline-breadcrumb-enable t)  ; Optional, I like the breadcrumbs
    (lsp-headerline-breadcrumb-enable-diagnostics nil) ; Don't make them red, too noisy
    (lsp-headerline-breadcrumb-enable-symbol-numbers nil)
    (lsp-headerline-breadcrumb-icons-enable nil)
    ;; modeline
    (lsp-modeline-code-actions-enable nil) ; Modeline should be relatively clean
    (lsp-modeline-diagnostics-enable nil)  ; Already supported through `flycheck'
    (lsp-modeline-workspace-status-enable nil) ; Modeline displays "LSP" when lsp-mode is enabled
    ;;(lsp-signature-doc-lines 1)                ; Don't raise the echo area. It's distracting
    ;;(lsp-ui-doc-use-childframe t)              ; Show docs for symbol at point
    (lsp-eldoc-render-all nil)            ; This would be very useful if it would respect `lsp-signature-doc-lines', currently it's distracting
    ;; lens
    ;;(lsp-lens-enable nil)                 ; Optional, I don't need it
    ;; semantic
    (lsp-semantic-tokens-enable nil)      ; Related to highlighting, and we defer to treesitter

    :init
    (setq lsp-use-plists t))

  (use-package lsp-ui
    :ensure t
    :commands
    (lsp-ui-doc-show
     lsp-ui-doc-glance)
    :bind (:map lsp-mode-map
        	("C-c C-d" . 'lsp-ui-doc-glance))
    :after (lsp-mode) ;; evil
    :config (setq lsp-ui-doc-enable t
        	  ;; evil-lookup-func #'lsp-ui-doc-glance ; Makes K in evil-mode toggle the doc for symbol at point
        	  lsp-ui-doc-show-with-cursor nil      ; Don't show doc when cursor is over symbol - too distracting
        	  lsp-ui-doc-include-signature t       ; Show signature
        	  lsp-ui-doc-position 'at-point)
    ;; lsp-booster: to prevent UI freezes
    :preface
    (defun lsp-booster--advice-json-parse (old-fn &rest args)
      "Try to parse bytecode instead of json."
      (or
       (when (equal (following-char) ?#)

         (let ((bytecode (read (current-buffer))))
           (when (byte-code-function-p bytecode)
             (funcall bytecode))))
       (apply old-fn args)))

    (defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
      "Prepend emacs-lsp-booster command to lsp CMD."
      (let ((orig-result (funcall old-fn cmd test?)))
        (if (and (not test?)                             ;; for check lsp-server-present?
        	 (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
        	 lsp-use-plists
        	 (not (functionp 'json-rpc-connection))  ;; native json-rpc
        	 (executable-find "emacs-lsp-booster"))
            (progn
              (message "Using emacs-lsp-booster for %s!" orig-result)
              (cons "emacs-lsp-booster" orig-result))
          orig-result)))
    
    :init
    (setq lsp-use-plists t)
    ;; Initiate https://github.com/blahgeek/emacs-lsp-booster for performance
    (advice-add (if (progn (require 'json)
        		   (fboundp 'json-parse-buffer))
        	    'json-parse-buffer
        	  'json-read)
        	:around
        	#'lsp-booster--advice-json-parse)
    (advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command))

  (with-eval-after-load 'lsp-mode
    (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
    (yas-global-mode))

  (use-package lsp-eslint
    :demand t
    :after lsp-mode)

#+END_SRC

** Utilities
#+BEGIN_SRC emacs-lisp

  (use-package exec-path-from-shell
     :ensure t
     :config (exec-path-from-shell-initialize))

   (use-package expand-region
     :ensure t
     :bind (("C-=" . er/expand-region)
            ("C--" . er/contract-region)))

  (use-package which-key
     :ensure t
     :config (which-key-mode))

  (use-package paredit
    :straight t
    :bind
    (:map paredit-mode-map
          ("M-s" . nil)))

  (use-package rainbow-delimiters
    :straight t)

  (use-package all-the-icons
     :straight t)

  ;; tree-sitter
  (setq major-mode-remap-alist
      '((typescript-mode . typescript-ts-mode)
        (tsx-mode . tsx-ts-mode)
        (js-mode . js-ts-mode)
        (js2-mode . js-ts-mode)
        (python-mode . python-ts-mode)))

#+END_SRC

*** Folding

#+BEGIN_SRC emacs-lisp

  (use-package hideshow ; built-in
    :commands (hs-cycle
               hs-global-cycle)
    :bind (:map prog-mode-map
                ("C-<tab>" . hs-cycle)
                ("<backtab>" . hs-global-cycle)
                ("C-S-<iso-lefttab>" . hs-global-cycle))
    :config
    (setq hs-hide-comments-when-hiding-all nil
  	;; Nicer code-folding overlays (with fringe indicators)
  	hs-set-up-overlay #'hideshow-set-up-overlay-fn)

    (defface hideshow-folded-face
      `((t (:inherit font-lock-comment-face :weight light)))
      "Face to hightlight `hideshow' overlays."
      :group 'hideshow)

    (defun hideshow-set-up-overlay-fn (ov)
      (when (eq 'code (overlay-get ov 'hs))
        (overlay-put
         ov 'display (propertize "  [...]  " 'face 'hideshow-folded-face))))

    (dolist (hs-command (list #'hs-cycle
                              #'hs-global-cycle))
      (advice-add hs-command :before
  		(lambda (&optional end) "Advice to ensure `hs-minor-mode' is enabled"
                    (unless (bound-and-true-p hs-minor-mode)
                      (hs-minor-mode +1)))))

    (defun hs-cycle (&optional level)
      (interactive "p")
      (save-excursion
        (if (= level 1)
            (pcase last-command
              ('hs-cycle
               (hs-hide-level 1)
               (setq this-command 'hs-cycle-children))
              ('hs-cycle-children
               ;;TODO: Fix this case. `hs-show-block' needs to be called twice to
               ;;open all folds of the parent block.
               (hs-show-block)
               (hs-show-block)
               (setq this-command 'hs-cycle-subtree))
              ('hs-cycle-subtree
               (hs-hide-block))
              (_
               (if (not (hs-already-hidden-p))
  		 (hs-hide-block)
                 (hs-hide-level 1)
                 (setq this-command 'hs-cycle-children))))
  	(hs-hide-level level)
  	(setq this-command 'hs-hide-level))))

    (defun hs-global-cycle ()
      (interactive)
      (pcase last-command
        ('hs-global-cycle
         (save-excursion (hs-show-all))
         (setq this-command 'hs-global-show))
        (_ (hs-hide-all))))  

    ;; extra folding support for more languages
    (unless (assq 't hs-special-modes-alist)
      (setq hs-special-modes-alist
            (append
             '((vimrc-mode "{{{" "}}}" "\"")
               ;; (yaml-mode "\\s-*\\_<\\(?:[^:]+\\)\\_>"
               ;;            ""
               ;;            "#"
               ;;            +fold-hideshow-forward-block-by-indent-fn nil)
               ;; (haml-mode "[#.%]" "\n" "/" +fold-hideshow-haml-forward-sexp-fn nil)
               ;; (ruby-mode "class\\|d\\(?:ef\\|o\\)\\|module\\|[[{]"
               ;;            "end\\|[]}]"
               ;;            "#\\|=begin"
               ;;            ruby-forward-sexp)
               ;; (enh-ruby-mode "class\\|d\\(?:ef\\|o\\)\\|module\\|[[{]"
               ;;                "end\\|[]}]"
               ;;                "#\\|=begin"
               ;;                enh-ruby-forward-sexp nil)
               (matlab-mode "^\s*if\\|switch\\|case\\|otherwise\\|while\\|^\s*for\\|try\\|catch\\|function"
                            "end"
                            "" (lambda (_arg) (matlab-forward-sexp)))
               (nxml-mode "<!--\\|<[^/>]*[^/]>"
  			"-->\\|</[^/>]*[^/]>"
  			"<!--" sgml-skip-tag-forward nil))
             hs-special-modes-alist
             '((t))))))

#+END_SRC

** Shell
*** Completion
Over tramp completion is very slow, native-complete will save the day/week/year.

#+BEGIN_SRC emacs-lisp

  (defun shell-mode-hook-setup ()
    "Set up `shell-mode'."

    (setq-local company-backends '((company-files company-native-complete)))
    ;; `company-native-complete' is better than `completion-at-point'
    (local-set-key (kbd "TAB") 'company-complete)

    ;; @see https://github.com/redguardtoo/emacs.d/issues/882
    (setq-local company-idle-delay 1)

    ;; prevent company-mode in remote buffers
    (when (file-remote-p default-directory)
      (company-mode -1)))
  
  (add-hook 'eshell-mode-hook 'shell-mode-hook-setup)
  (add-hook 'shell-mode-hook 'shell-mode-hook-setup)

#+END_SRC

** Elm
#+BEGIN_SRC emacs-lisp

    (use-package elm-mode
      :ensure t)

#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp

  (use-package elpy
    :ensure t
    :init
    (elpy-enable))

  (use-package python-mode
    :ensure t
    :hook 
    ((python-mode . lsp-deferred)
     (python-mode . elpy-mode))
    :custom (python-shell-interpreter "python3"))

#+END_SRC

** Emacs Lisp

#+BEGIN_SRC emacs-lisp

  (use-package elisp-slime-nav
    :straight t)

  (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
    (add-hook hook 'turn-on-elisp-slime-nav-mode))


  (with-eval-after-load 'lsp-mode
    (add-to-list 'lsp-language-id-configuration
                 '(emacs-lisp-mode . "emacs-lisp")))

#+END_SRC

** Common Lisp

#+BEGIN_SRC emacs-lisp

  (use-package sly
    :straight t
    :config
    (setq sly-contribs '(sly-fancy))
    (setq inferior-lisp-program "/opt/homebrew/bin/sbcl") 
    :hook (lisp-mode . sly-mode))

#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp

   (use-package haskell-mode
     :straight t)  

#+END_SRC

** Racket
#+BEGIN_SRC emacs-lisp

  (use-package racket-mode
    :straight t
    :hook
    ((racket-mode . racket-xp-mode)
     (racket-mode . paredit-mode)
     (racket-mode . rainbow-delimiters-mode)))

#+END_SRC
** Web

#+BEGIN_SRC emacs-lisp

  (use-package web-mode
    :after (add-node-modules-path)
    :ensure t
    :mode (("\\.js\\'" . web-mode)
	   ("\\.jsx\\'" . web-mode)
	   ("\\.ts\\'" . web-mode)
	   ("\\.tsx\\'" . web-mode)
	   ("\\.html\\'" . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2
	  web-mode-code-indent-offset 2
	  web-mode-css-indent-offset 2
	  web-mode-enable-auto-closing t
	  web-mode-enable-auto-opening t
	  web-mode-enable-auto-pairing t
	  web-mode-enable-auto-indentation t
	  web-mode-enable-auto-quoting t
	  web-mode-enable-current-column-highlight t
	  web-mode-enable-current-element-highlight t)
    :commands web-mode)

#+END_SRC

** Typescript and Javascript
#+BEGIN_SRC emacs-lisp

  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . tsx-ts-mode))

  (use-package tide
    :ensure t
    :after (company flycheck)
    :hook ((typescript-ts-mode . tide-setup)
    	 (tsx-ts-mode . tide-setup)
    	 (typescript-ts-mode . tide-hl-identifier-mode)
    	 (before-save . tide-format-before-save)))

  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    (company-mode +1))

  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)

  ;; formats the buffer before saving
  (add-hook 'before-save-hook 'tide-format-before-save)

  ;; if you use typescript-mode
  (add-hook 'typescript-mode-hook #'setup-tide-mode)
  ;; if you use treesitter based typescript-ts-mode (emacs 29+)
  (add-hook 'typescript-ts-mode-hook #'setup-tide-mode)

  (add-hook 'tsx-ts-mode-hook #'setup-tide-mode)

#+END_SRC

** React
#+BEGIN_SRC emacs-lisp

  (setq gc-cons-threshold (* 100 1024 1024)
	read-process-output-max (* 1024 1024)
	company-idle-delay 0.0
	company-minimum-prefix-length 1
	create-lockfiles nil)

  (with-eval-after-load 'js
    (define-key js-mode-map (kbd "M-.") nil))

#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp

  (use-package org-contrib
    :ensure t)

  (require 'ob-oz)

  (use-package ob-racket
    :after org
    :config
    (add-hook 'ob-racket-pre-runtime-library-load-hook
  	      #'ob-racket-raco-make-runtime-library)
    :straight (ob-racket
  	     :type git :host github :repo "hasu/emacs-ob-racket"
  	     :files ("*.el" "*.rkt")))

#+END_SRC

* Writing
** Markdown
#+BEGIN_SRC emacs-lisp

  (use-package markdown-mode
    :straight t)

#+END_SRC

** Food Recipes
#+BEGIN_SRC emacs-lisp

  (use-package org-chef
    :ensure t)

#+END_SRC

** NoteTaking
#+BEGIN_SRC emacs-lisp

  (use-package org-roam
    :ensure t
    :init (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/RoamNotes/")
    (org-roam-completion-everywhere t)
    (org-roam-dailies-capture-templates
    '(("d" "default" entry "* %<%I:%M %p>: %?"
       :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
        :unnarrowed t)
       ("b" "book notes" plain
        (file "~/RoamNotes/Templates/book-note-template.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("p" "project" plain (file "~/RoamNotes/Templates/project-template.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Project")
        :unnarrowed t)))
    :bind
    (("C-c n l" . org-roam-buffer-toggle)
     ("C-c n f" . org-roam-node-find)
     ("C-c n i" . org-roam-node-insert)
     :map org-mode-map
     ("C-M-i" . completion-at-point)
     :map org-roam-dailies-map
       ("Y" . org-roam-dailies-capture-yesterday)
       ("T" . org-roam-dailies-capture-tomorrow)
       ("v" . org-roam-dailies-goto-date)
       ("c" . org-roam-dailies-capture-date))
    :bind-keymap
    ("C-c n d". org-roam-dailies-map)
    :config
    (require 'org-roam-dailies)
    (org-roam-db-autosync-mode))


  (defun new-note ()
    "Spawn a new buffer for note taking."
    (interactive)
    (switch-to-buffer (generate-new-buffer "*note*"))
    (text-mode)
    (insert-in-buffer "*note*" "New Note"))

#+END_SRC

* AI/LLM Integration

Using gptel for integration with LLM tools.

[[eww:https://github.com/karthink/gptel?tab=readme-ov-file#anthropic-claude][gptel for claude]]

#+BEGIN_SRC emacs-lisp

  (use-package gptel
    :ensure t)

  (setq gptel-api-key
        (read-env-variable "OPENAI_API_KEY"))

  (gptel-make-anthropic "Claude"
    :stream t
    :key (read-env-variable "CLAUDE_API_KEY"))

  (gptel-make-deepseek "DeepSeek"
    :stream t
    :key (read-env-variable "DEEPSEEK_API_KEY"))

  (gptel-make-gemini "Gemini"
    :stream t
    :key (read-env-variable "GEMINI_API_KEY"))

  (setq gptel-model 'gemini-2.0-flash-exp)

#+END_SRC

* Mail
** Notmuch
[[eww:https://jonathanchu.is/posts/emacs-notmuch-isync-msmtp-setup/][Notmuch emacs setup]]

#+BEGIN_SRC emacs-lisp

  (use-package notmuch
    :ensure t
    :defer t)

  (setq send-mail-function 'sendmail-send-it
      sendmail-program "/opt/homebrew/bin/msmtp"
      mail-specify-envelope-from t
      message-sendmail-envelope-from 'header
      mail-envelope-from 'header)

#+END_SRC

** mu4e
[[eww:https://macowners.club/posts/email-emacs-mu4e-macos/][Email setup in Emacs with Mu4e on MacOS]]
